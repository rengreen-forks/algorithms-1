package com.codebreeze.algorithms;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static java.util.stream.Collectors.counting;
import static java.util.stream.Collectors.groupingBy;

/*
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?


the theory is that the solution can be found by multiplying the power of the prime factors of the sum (plus +1)

for example:

for sum 18, primes are: 2, 3, 3 = 2 ^ 1 * 3 ^ 2
so the powers are 1 and 2, so the number of factors for 18 = (2 + 1)(1 + 1) = 6 (which are: 1, 2, 3, 6, 9, 18)
 */
public class HighlyDivisibleTriangularNumber
{
    public static long calculate(int n)
    {
        int i = 1;
        while(true)
        {
            final long sum = i * (i + 1) / 2; //find the corresponding triangular number using arithmetic progression sum
            final Long frequencies = frequencyMap(primeFactors(sum))
                    .values() //get the freqency, i.e. the powers of the prime factors
                    .stream()
                    .map(l -> l + 1) //increment each of them
                    .reduce(1l, (l1, l2) -> l1*l2); //multiply them
            if(frequencies > n)
            {
                return sum;
            }
            else
            {
                i++;
            }
        }
    }

    private static Map<Long, Long> frequencyMap(final List<Long> values)
    {
        return values.stream()
                     .collect(groupingBy(e -> e, counting()));
    }

    private static List<Long> primeFactors(final long numbers) {
        long n = numbers;
        List<Long> factors = new ArrayList<>();
        for (long i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n > 1) {
            factors.add(n);
        }
        return factors;
    }
}
