package com.codebreeze.algorithms;

import java.util.Iterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

/**
 * Even Fibonacci numbers
 Problem 2
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class SumOfEvenFibonacciTermsBelow
{
    public static int calculate(int max)
    {
        return stream(fibonancciIteratorWithMax(max))
                .filter(i -> i % 2 == 0)
                .reduce(0, Math::addExact);
    }

    //mathematical definition, but tail recursion is not efficient in java.
    public static int fibonacci(int n)
    {
        if (n < 2)
        {
            return 1;
        }
        else
        {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }

    //has better memory footprint than a recursion implementation
    public static Iterator<Integer> fibonancciIteratorWithMax(final int max)
    {
        return new Iterator<Integer>()
        {
            int n = -1;
            int first = 0;
            int second = 1;

            @Override
            public boolean hasNext()
            {
                // next one should be less than maximum, otherwise, we've given the last already
                return (first + second) < max;
            }

            public Integer next()
            {
                n++;
                //two first special cases
                if (n == 0)
                {
                    first = 0;
                    return 0; //first element of the fibonacci sequence
                }
                else if (n == 1)
                {
                    second = 1;
                    return 1; //second element of the fibonacci sequence
                }
                else
                {
                    int newValue = first + second;
                    first = second;
                    second = newValue;
                    return newValue;
                }
            }
        };
    }

    public static <T> Stream<T> stream(Iterator<T> iterator)
    {
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED), false);
    }
}
